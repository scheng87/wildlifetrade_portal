{
    "collab_server" : "",
    "contents" : "##Set up environment and constants\nlibrary(dplyr)\nlibrary(tidyr)\npath <- \"~/Documents/Wildlife_Trade/\"\nlut.file <- \"questions_LU_cat.csv\"\ncsv.file <- \"Data_Final_IWT_Dec14.csv\"\ncsv <- paste(path, csv.file, sep=\"\")\nlut <- paste(path, lut.file, sep=\"\")\n\n##Define functions\n#Move column to end or beginning of the dataframe\nmove.column <- function(data, tomove, where = \"last\", ba = NULL) {\ntemp <- setdiff(names(data), tomove)\ndf.new <- switch(where,\nfirst = data[c(tomove, temp)],\nlast = data[c(temp, tomove)])\nreturn(df.new)\n}\n#Subset the data based on categories of the Look-up table (LUT)\ncat.subsetter <- function(dataset,expr){\nfields <- lut.cat %>% filter_(expr) %>% select(Field_name)\nlist <- list(fields[[1]])[[1]]\ndata.new <- dataset[,colnames(dataset) %in% list]\nreturn(data.new)\n}\n#Summarise the data per column (does not group by article)\nsummarizer <- function(dataset, fun.name){\ncol.to.merge <- colnames(dataset)\n#Create a list of it\ndots <- lapply(col.to.merge, as.symbol)\ndata.out <- dataset %>% summarise_each(funs(fun.name))\ndata.out <- gather_(data.out,\"field\", as.character(substitute(fun.name)), dots)\nreturn(data.out)\n}\n#Summarise the data per journal article and creates a character list of all the values of the article\nsummarizer.list <- function(dataset){\n#new.field <- paste(field, \"n\", sep=\"_\")\ndata.l <- dataset %>% group_by(aid) %>% summarise_each(funs(toString))\ndata.n <-  dataset %>% group_by(aid) %>% summarise_each(funs(n_distinct))\ndata.out <- full_join(data.l, data.n, by=\"aid\")\nreturn(data.out)\n}\n#List the unique values accross the whole table (ie, all the journal articles)\nsummarizer.list.all <- function(dataset, fields){\nsummarise_each(dataset, funs(ul=toString(sort(unique(.))))) %>%\ngather_(\"field\", \"valuesList\",fields) %>%\nselect(field, valuesList)\n}\n##Summarise information groupiing by journal article with option to use two functions in a row, then gather the information to transpose the dataframe with fields used as rows\nsummarizer.groupby <- function(dataset, fun.name, fun.name2=NULL){\n#List the column names\ncol.to.merge <- colnames(dataset)\n#Create a list of symbols from the column names\ndots <- lapply(col.to.merge[2:length(col.to.merge)], as.symbol)\nif (is.null(fun.name2)){\ndata.out <- dataset  %>% summarise_each(funs(fun.name))\ndata.out <- gather_(data.out,\"field\", as.character(substitute(fun.name)), dots) %>% select(-aid)\n} else {\ndata.out <- dataset  %>% group_by(aid) %>% summarise_each(funs(fun.name)) %>% summarise_each(funs(fun.name2))\ndata.out <- gather_(data.out,\"field\", as.character(substitute(fun.name2)), dots) %>% select(-aid)\n}\nreturn(data.out)\n}\n##Merge the multi-value binary coded fields into one column with repeated entries\ncombine.binfield <- function(datasubset,field, delete.option=1){\n#Get the binary fields\n#data.bin <- datasubset %>% select(contains(field))\ndata.bin <- datasubset %>% select(starts_with(field))\ncol.to.merge <- colnames(data.bin)\n#Create a list of it\ndots <- lapply(col.to.merge, as.symbol)\n#Keep only the binary columns\ndata.bin <-  datasubset[,colnames(datasubset) %in% c(\"aid\",col.to.merge)]\n#Merge the binary fields\n#data.binlong <- datasubset %>% gather_(field, \"have\", dots)\ndata.binlong <- data.bin %>% gather_(field, \"have\", dots)\n#test to delete the rows with 0\nif (delete.option == 1) {\ndata.binlong <- data.binlong %>% filter(have==1) %>% separate_(field, c(\"prefix\",field), sep = \"\\\\.\")\n} else {\ndata.binlong <- data.binlong %>% separate_(field, c(\"prefix\",field), sep = \"\\\\.\")\ndata.binlong[,field] <- ifelse(data.binlong$have == 0,NA, data.binlong[,field])\ndata.binlong <- unique(data.binlong)\n}\n#Remove the temporary fields\ndata.binlong$prefix <- NULL\ndata.binlong$have <- NULL\n#transform aid to numeric\ndata.binlong <- data.binlong %>% transform(aid = as.integer(aid))\n#Sort data using aid\ndata.binlong <- arrange(data.binlong,aid)\nreturn(data.binlong)\n}\n\n##Define functions\n\n##Assign intervention type to intervention group\nassignIntGroup <- function(input,output){\n  rows <- c(1:nrow(input))\n  int_groups <- matrix(nrow=nrow(input),ncol=1)\n  rownames(int_groups) <- rows\n  colnames(int_groups) <- c(\"int_group\")\n  for (i in rows){\n    int <- as.vector(input$Int_type[i])\n    if (int == \"laws\" | int == \"policies\") {\n      group <- \"Establish/refine laws & policies\"\n    } else if (int == \"detection\" | int == \"prosecution\" | int == \"civil\") {\n      group <- \"Enforcement/compliance\"\n    } else if (int == \"substitution\" | int == \"awareness\" | int == \"market\") {\n      group <- \"Reduce demand/consumption\"\n    } else if (int == \"disincentive\" | int == \"stewardship\" | int == \"conflict\") {\n      group <- \"Support livelihoods\"\n    } else if (int == \"spat_protect\" | int == \"harvest_reg\" | int == \"culture\") {\n      group <- \"Reduce threats to species\"\n    } else \n      group <- int\n    int_groups[i,\"int_group\"] <- group\n  }\n  int_groups <- as.data.frame(int_groups)\n  output <- bind_cols(input,int_groups)\n  output <- filter(output,!is.na(int_groups))\n  return(output)\n}\n\n##Assign outcome type to outcome group\nassignOutGroup <- function(input,output){\n  rows <- c(1:nrow(input))\n  out_groups <- matrix(nrow=nrow(input),ncol=1)\n  rownames(out_groups) <- rows\n  colnames(out_groups) <- c(\"out_group\")\n  for (i in rows){\n    out <- as.vector(input$Outcome[i])\n    if (out == \"Management\" | out == \"Protection\" | out == \"Trade\" | out == \"Behavior change\") {\n      group <- \"Behaviour change\"\n    } else if (out == \"Population\" | out == \"Species\") {\n      group <- \"Species\"\n    } else if (out == \"Economic living standards\" | out == \"Material living standards\" | out == \"Health\" | out == \"Education\" | out == \"Social relations\" | out == \"Security and safety\" | out == \"Governance and empowerment\" | out == \"Subjective well-being\" | out == \"Culture & spirituality\" | out == \"Freedom of choice & action\") {\n      group <- \"Human well-being\"\n    } else \n      group <- out\n    out_groups[i,\"out_group\"] <- group\n  }\n  out_groups <- as.data.frame(out_groups)\n  output <- bind_cols(input,out_groups)\n  output <- filter(output,!is.na(out_groups))\n  return(output)\n}\n\n##--------------------------------------------------------\n##Begin processing data \n##--------------------------------------------------------\n\n##Read in data and subset\ndata <- read.csv(csv, head=TRUE, sep=\",\", colClasses=\"character\")\n# Look-up table with the categories and attributes\nlut.cat <- read.csv(lut, head=TRUE, sep=\",\", colClasses=\"character\")\n#list field names\nfield.names <- colnames(data)\ndata.biblio.raw <- cat.subsetter(data,quote(Category == \"index\" | Category == \"A\" | Category == \"R\"))\ndata.interv.raw <- cat.subsetter(data,quote(Category == \"index\" | Category == \"I\"))\ndata.study.raw <- cat.subsetter(data,quote(Category == \"index\" | Category == \"S\"))\ndata.outcome.raw <- cat.subsetter(data,quote(Category == \"index\" | Category == \"O\"))\ndata.pathways.raw <- cat.subsetter(data,quote(Category == \"index\" | Category == \"P\"))\ndata.biomes.study <- cat.subsetter(data,quote(Category == \"index\" | Category == \"BS\"))\n##Merge multivalued fields\n##Bibliographic information\ndata.biblio.affil <- combine.binfield(data.biblio.raw, \"Affil_type\")\n#Summarise the data\nsummary.byaid <- summarizer.list(data.biblio.affil)\n#Remove the binary fields from the raw data\ndata.biblio <- select(data.biblio.raw,-starts_with(\"Affil_type\"))  %>%\n  transform(aid = as.integer(aid))\n#Join the table\ndata.biblio <- full_join(data.biblio, data.biblio.affil, by=\"aid\")\n\ndata.biblio <- distinct(data.biblio)\n#cleanup\nrm(list=ls(pattern=\"data.biblio.\"))\n\n##Intervention\n\n#Parts used\n#Combine the binary fields\ndata.interv.Parts <- combine.binfield(data.interv.raw, \"Parts\")\n#Summarise the data\nsummary.byaid <- summarizer.list(data.interv.Parts) %>% right_join(summary.byaid,by=\"aid\")\n\n#Purpose\n#Combine the binary fields\ndata.interv.Purpose <- combine.binfield(data.interv.raw, \"Purpose\")\n#Summarise the data\nsummary.byaid <- summarizer.list(data.interv.Purpose) %>% right_join(summary.byaid,by=\"aid\")\n\n#intervention type\n#Combine the binary fields\ndata.interv.Int <- combine.binfield(data.interv.raw, \"Int_type\")\n#Summarise the data\nsummary.byaid <- summarizer.list(data.interv.Int) %>% right_join(summary.byaid,by=\"aid\")\n\n#Intervention - geographic scale\n#Combine the binary fields\ndata.interv.Int_geo <- combine.binfield(data.interv.raw, \"Int_geo\")\n#Summarise the data\nsummary.byaid <- summarizer.list(data.interv.Int_geo) %>% right_join(summary.byaid,by=\"aid\")\n\n#Intervention - supply chain\n#Combine the binary fields\ndata.interv.supply_chain <- combine.binfield(data.interv.raw, \"Int_supplychain\")\n#Summarise the data\nsummary.byaid <- summarizer.list(data.interv.supply_chain) %>% right_join(summary.byaid,by=\"aid\")\n\n#Implementation type\n#Combine the binary fields\ndata.interv.Impl <- combine.binfield(data.interv.raw, \"Impl_type\")\n#Summarise the data\nsummary.byaid <- summarizer.list(data.interv.Impl) %>% right_join(summary.byaid,by=\"aid\")\n\n#Merge the binary cases\ndata.interv.combined <- full_join(data.interv.Int, data.interv.Impl, by=\"aid\") %>% distinct()\ndata.interv.combined <- full_join(data.interv.combined, data.interv.Parts, by=\"aid\") %>% distinct()\ndata.interv.combined <- full_join(data.interv.combined, data.interv.Purpose, by=\"aid\") %>% distinct()\ndata.interv.combined <- full_join(data.interv.combined, data.interv.supply_chain, by=\"aid\") %>% distinct()\ndata.interv.combined <- full_join(data.interv.combined, data.interv.Int_geo, by=\"aid\") %>% distinct()\ndata.interv.combined <- distinct(data.interv.combined)\n\n#Remove the binary fields from the raw data\ndata.interv <- select(data.interv.raw,-starts_with(\"Int_type\")) %>%\n  select(-starts_with(\"Impl_type\")) %>% select(-starts_with(\"Parts\")) %>% select(-starts_with(\"Purpose\")) %>% select(-starts_with(\"Int_geo\")) %>% select(-starts_with(\"Int_supplychain\")) %>% \n  transform(aid = as.integer(aid))\n#Join the table\ndata.interv <- full_join(data.interv, data.interv.combined, by=\"aid\")\ndata.interv <- distinct(data.interv)\n#Assign intervention groups\ndata.interv <- assignIntGroup(data.interv,data.interv2)\n#cleanup\nrm(list=ls(pattern=\"data.interv.\"))\n\n##Study information\n#Study objective\n#Combine the binary fields\ndata.study.obj <- combine.binfield(data.study.raw, \"Study_obj\")\n#Summarise the data\nsummary.byaid <- summarizer.list(data.study.obj) %>% right_join(summary.byaid,by=\"aid\")\n\n#Study supply chain\n#Combine the binary fields\ndata.study.supplychain <- combine.binfield(data.study.raw, \"Study_supplychain\")\n#Summarise the data\nsummary.byaid <- summarizer.list(data.study.supplychain) %>% right_join(summary.byaid,by=\"aid\")\n\n#Evaluation affiliation type\n#Combine the binary fields\ndata.study.affil <- combine.binfield(data.study.raw, \"Eval_affil_type\")\n#Summarise the data\nsummary.byaid <- summarizer.list(data.study.affil) %>% right_join(summary.byaid,by=\"aid\")\n\n#Data type\n#Combine the binary fields\ndata.study.type <- combine.binfield(data.study.raw, \"Data_type\")\n#Summarise the data\nsummary.byaid <- summarizer.list(data.study.type) %>% right_join(summary.byaid,by=\"aid\")\n\n#Unit of analysis\n#Combine the binary fields\ndata.study.unit <- combine.binfield(data.study.raw, \"Unit_analysis\")\n#Summarise the data\nsummary.byaid <- summarizer.list(data.study.unit) %>% right_join(summary.byaid,by=\"aid\")\n\n#Merge the binary cases\ndata.study.combined <- full_join(data.study.obj, data.study.supplychain, by=\"aid\") %>% full_join(data.study.affil, by=\"aid\") %>% full_join(data.study.type, by=\"aid\")  %>% full_join(data.study.unit, by=\"aid\")\n\ndata.study.combined <- distinct(data.study.combined)\n\n#Remove the binary fields from the raw data\ndata.study <- select(data.study.raw,-starts_with(\"Eval_affil_type\")) %>%\n  select(-starts_with(\"Unit_analysis\")) %>% select(-starts_with(\"Data_type\")) %>% select(-starts_with(\"Study_supplychain\")) %>% select(-starts_with(\"Study_obj\")) %>% transform(aid = as.integer(aid))\n#Join the table\ndata.study <- full_join(data.study, data.study.combined, by=\"aid\")\ndata.study <- distinct(data.study)\n\n#cleanup\nrm(list=ls(pattern=\"data.study.\"))\n\n##Biomes\n#Combine the binary fields\ndata.biomes <- combine.binfield(data.biomes.study, \"Biome.\")\n#Summarise the data\nsummary.byaid <- summarizer.list(data.biomes) %>% right_join(summary.byaid,by=\"aid\")\n#cleanup\nrm(list=ls(pattern=\"data.biomes.study\"))\n\n##Outcomes\ndata.outcome <- distinct(data.outcome.raw)\ndata.outcome <- assignOutGroup(data.outcome,data.outcome.2)\ndata.outcome$aid <- as.integer(data.outcome$aid)\nrm(list=ls(pattern=\"data.outcome.\"))\n\n##Pathways\ndata.pathway <- distinct(data.pathways.raw)\ndata.pathway$aid <- as.integer(data.pathway$aid)\nrm(list=ls(pattern=\"data.pathways.raw\"))\n\n##Write final R data and package\nsave(data.biblio,data.interv,data.study,data.biomes,data.outcome,data.pathway,\n      file = paste(path, \"IWT_Evidence_Map.RData\", sep=\"\"))\n\n",
    "created" : 1496903006335.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3581951720",
    "id" : "52E5F9D2",
    "lastKnownWriteTime" : 1497039630,
    "last_content_update" : 1497039630496,
    "path" : "~/Documents/Wildlife_Trade/evidence_based_IWT.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}