{
    "collab_server" : "",
    "contents" : "elink = function(env_serv) with (env_serv, {\n  data <- map_data_final\n  \n  dataInputB <- reactive({\n    if (input$region1 != \"All\"){\n      sub <- data[data$region == input$region1,]\n    } else \n      sub <- data\n    sub <- distinct(sub)\n    })\n  \n  dataInputC <- reactive({\n    data <- dataInputB()\n    if (input$supplychain != \"All\"){\n      sub <- data[data$Int_supplychain == input$supplychain,]\n    } else\n      sub <- data\n    sub <- distinct(sub)\n  })\n        \n  final_input <- reactive({\n    if (input$expand == TRUE){\n      io_counts = matrix(nrow=length(out_type), ncol=length(int_type))\n      rownames(io_counts) <- out_type\n      colnames(io_counts) <- int_type\n      io_counts <- io_counts\n    } else if (input$expand == FALSE){\n      io_counts = matrix(nrow=length(out_group), ncol=length(int_group))\n      rownames(io_counts) <- out_group\n      colnames(io_counts) <- int_group\n      io_counts <- io_counts\n    }\n  })\n    \n  final_matrix <- reactive({\n    io_counts <- final_input()\n    if (input$expand == FALSE){\n      for (i in int_group){\n        for (j in out_group){\n          subset <- filter(dataInputC(), out_group == j, int_group == i)\n          io_counts[j,i] <- n_distinct(subset$aid)\n        }\n      }\n      io_counts <- as.data.frame(io_counts)\n      io_counts$outcome <- rownames(io_counts)\n      io_counts <- gather(io_counts,int,counts,1:(ncol(io_counts)-1)) \n      io_counts <- as.data.frame(io_counts)\n    } else if (input$expand == TRUE) {\n      for (i in int_type){\n        for (j in out_type){\n          subset <- filter(dataInputC(), Outcome == j, Int_type == i)\n          io_counts[j,i] <- n_distinct(subset$aid)\n        }\n      }\n      io_counts <- as.data.frame(io_counts)\n      io_counts$outcome <- rownames(io_counts)\n      io_counts <- gather(io_counts,int,counts,1:(ncol(io_counts)-1))\n      io_counts <- as.data.frame(io_counts)\n    }\n    full_data <- io_counts\n    colnames(full_data) <- c(\"outcome\",\"int\",\"aid_count\")\n    full_data[] <- lapply(full_data,function(x){replace(x,x == 0,NA)})\n    full_data <- as.data.frame(full_data)\n  })\n\n  output$heatmap <- renderPlot({\n    DATA <- as.data.frame(final_matrix())\n    if (input$expand == FALSE){\n      ggplot(DATA, aes(y=outcome,x=int,label=aid_count)) +\n        geom_tile(aes(fill=aid_count),colour=\"black\") +\n        theme(axis.text.x = element_text(family=\"Proxima Nova\",angle=45,hjust=1,size=16),axis.text.y=element_text(family=\"Proxima Nova\",size=16),axis.title.x=element_text(family=\"Proxima Nova\",size=20,vjust=-3),axis.title.y=element_text(family=\"Proxima Nova\",size=20,vjust=-4)) +\n        labs(x = \"Types of actions\",y=\"Types of outcomes\") +\n        scale_fill_gradient2(name=\"No. of unique articles\",midpoint=(max(DATA$aid_count,na.rm=TRUE)/2),low=\"#c7e9c0\",mid=\"#41ab5d\",high=\"#00441b\",na.value=\"white\") +\n        coord_fixed(ratio=5/6) +\n        geom_text(size=5,family=\"Proxima Nova\") +\n        scale_x_discrete(name=\"Types of actions\",limits=c(\"Establish/refine laws & policies\", \"Enforcement/compliance\", \"Reduce demand/consumption\", \"Support livelihoods\", \"Reduce threats to species\"),labels=c(\"Establish/refine laws & policies\", \"Enforcement/compliance\", \"Reduce demand/consumption\", \"Support livelihoods\", \"Reduce threats to species\")) +\n        scale_y_discrete(name=\"Types of outcomes\",limits=c(\"Behavioural\",\"Biological\",\"Human well-being\"),labels=c(\"Behavioural\",\"Biological\",\"Human well-being\"))\n    } else if (input$expand == TRUE){\n      ggplot(DATA, aes(y=outcome,x=int,label=aid_count)) +\n        geom_tile(aes(fill=aid_count),colour=\"black\") +\n        theme(axis.text.x = element_text(family=\"Proxima Nova\",angle=45,hjust=1,size=14),axis.text.y=element_text(family=\"Proxima Nova\",size=14),axis.title.x=element_text(family=\"Proxima Nova\",size=20,vjust=-3),axis.title.y=element_text(family=\"Proxima Nova\",size=20,vjust=-4)) +\n        labs(x = \"Types of actions\",y=\"Types of outcomes\") +\n        scale_fill_gradient2(name=\"No. of unique articles\",midpoint=(max(DATA$aid_count,na.rm=TRUE)/2),low=\"#c7e9c0\",mid=\"#41ab5d\",high=\"#00441b\",na.value=\"white\") +\n        coord_fixed(ratio=5/6) +\n        geom_text(size=4,family=\"Proxima Nova\",color=\"gray\") +\n        scale_x_discrete(limits=c(\"laws\",\"policies\",\"detection\",\"prosecution\",\"civil\",\"substitution\",\"awareness\",\"market\",\"disincentive\",\"stewardship\",\"conflict\",\"spat_protect\",\"harvest_reg\",\"culture\"),labels=c(\"Laws, regulations & codes\",\"Policies & regulations\",\"Detection\",\"Prosecution\",\"Civil action\",\"Substitutions\",\"Awareness raising\",\"Market-based incentives\",\"Disincentives for illegal behavior\",\"Incentives for stewardship of wildlife\",\"Decrease human-wildlife conflict\",\"Spatial areas of protection\",\"Regulate harvest\",\"Culturing of species\")) +\n        scale_y_discrete(name=\"Types of outcomes\",limits=c(\"Management\",\"Protection\",\"Trade\",\"Behavior change\",\"Population\",\"Species\",\"Economic living standards\", \"Material living standards\",\"Health\",\"Education\",\"Social relations\",\"Security and safety\",\"Governance and empowerment\",\"Subjective well-being\",\"Culture & spirituality\",\"Freedom of choice & action\"),labels=c(\"Management\",\"Protection\",\"Trade\",\"Behavior change\",\"Population\",\"Species\",\"Economic living standards\", \"Material living standards\",\"Health\",\"Education\",\"Social relations\",\"Security and safety\",\"Governance and empowerment\",\"Subjective well-being\",\"Culture & spirituality\",\"Freedom of choice & action\"))\n    }\n  })\n  \n  output$map_data <- DT::renderDataTable({\n    data <- distinct(dataInputC())\n    data <- select(data,aid,Pub_type,Authors,Pub_year,Title,Journal,Species,Desired_outcome,Actions_taken,int_group,Int_type,Parts,Purpose,Int_supplychain,Study_goal,Study_location,Study_country,subregion,region,Design.control,Comps.type,Design.type,Study_supplychain,Stated_outcomes,out_group,Outcome,Indicators,Outcome.data_type,species_group,species_habitat,link,FullText)\n    colnames(data) <- c(\"Article ID\",\"Publication type\",\"Author(s)\",\"Publication year\",\"Title\",\"Journal\",\"Target species\",\"Desired outcome of intervention\",\"Actions taken\",\"Intervention group\",\"Intervention sub-type\",\"Parts used\",\"Purpose\",\"Part of the supply chain\",\"Goal of study\",\"Location of study\",\"Country of study\",\"Subregion of study\",\"Region of study\",\"Does the study employ a control?\",\"What type of comparators are used?\",\"What is the design of the study?\",\"Where along the supply chain does this study examine?\",\"Stated outcomes measured\",\"Outcome categories\",\"Outcome types\",\"Indicators used\",\"Data type\",\"Type of wildlife\",\"Species habitat\",\"DOI link\",\"Open Access?\")\n    data <- distinct(data)\n    DT::datatable(data, escape=FALSE)\n  })\n\n  biblio_maptab <- reactive({\n    data <- dataInputC()\n    bib <- data %>% select(aid,Biome.,Pub_type,Authors,Title,Pub_year,DOI,Journal) %>% distinct()\n    colnames(bib) <- c(\"Article ID\", \"Biome/ecoregion\",\"Publication type\",\"Authors\",\"Title\",\"Year of publication\",\"DOI\",\"Journal\")\n    bib <- bib\n  })\n  \n  output$downloadFullData <- downloadHandler(\n    filename = function() {\n      paste(input$region1,\"_\",input$biome,\"_dataset.csv\",sep=\"\")\n    },\n    content = function(file) {\n      write.csv(dataInputB(), file)\n    }\n  )\n  \n  output$downloadBiblio <- downloadHandler(\n    filename = function() {\n      paste(input$region1,\"_\",input$biome,\"_biblio.csv\",sep=\"\")\n    },\n    content = function(file) {\n      write.csv(biblio_maptab(), file)\n    }\n  )\n  \n  observeEvent(input$submit, {\n    output$download_opts1 <- renderUI({\n      downloadButton(\"downloadBiblio\", \"Bibliography as .csv\")\n    })\n  })\n  \n  observeEvent(input$submit, {\n    output$download_opts2 <- renderUI({\n      downloadButton(\"downloadFullData\", \"Data as .csv\")\n    })\n  })\n  \n  us1 <- reactive({\n    n <- n_distinct(dataInputC()$aid)\n  })\n  \n  oa1 <- reactive({\n    data <- select(dataInputC(),aid,FullText)\n    FT <- filter(data, FullText == \"Y\")\n    FT <- distinct(FT)\n    n <- n_distinct(FT$aid)\n  })\n  \n  output$elink_us <- renderText({\n    as.character(us1())\n  })\n  \n  output$elink_oa <- renderText({\n    as.character(oa1())\n  })\n})\n\neintout = function(env_serv) with (env_serv,{\n\n  ##==========\n  ## Setting dynamic population of drop-down lists\n  ##==========\n\n  ## Set character classes of inputs\n  regions$COUNTRY <- as.character(as.vector(regions$COUNTRY))\n  regions$REGION <- as.character(as.vector(regions$REGION))\n  regions$CODE <- as.character(as.vector(regions$CODE))\n  regions$SUBREGION <- as.character(as.vector(regions$SUBREGION))\n\n  intlabels$Int_type <- as.character(as.vector(intlabels$Int_type))\n  intlabels$int_group <- as.character(as.vector(intlabels$int_group))\n  \n  intlabels$Out_type <- as.character(as.vector(intlabels$Out_type))\n  intlabels$out_group <- as.character(as.vector(intlabels$out_group))\n\n  ## Set dynamic population\n  observe({\n    eintout_subreg <- if (input$eintout_region == \"All\") character(0) else{\n      filter(regions, REGION == input$eintout_region) %>%\n        select(SUBREGION) %>%\n        unique()\n    }\n    stillSelected <- isolate(input$eintout_subreg[input$eintout_subreg %in% eintout_subreg])\n    rownames(stillSelected) <- NULL\n    rownames(eintout_subreg) <- NULL\n    updateSelectInput(session,\"eintout_subreg\", choices=as.vector(eintout_subreg), selected=stillSelected)\n  })\n\n  observe({\n    eintout_country <- if (input$eintout_subreg == \"All\") character(0) else{\n      filter(regions, SUBREGION == input$eintout_subreg) %>%\n        select(COUNTRY) %>%\n        unique()\n    }\n\n    stillSelected <- isolate(input$eintout_country[input$eintout_country %in% eintout_country])\n    rownames(stillSelected) <- NULL\n    rownames(eintout_country) <- NULL\n    updateSelectInput(session, \"eintout_country\",choice=as.vector(eintout_country), selected=stillSelected)\n  })\n  \n  observe({\n    eintout_inttype <- if (input$eintout_intgroup == \"All\") character(0) else{\n      filter(intlabels, int_group == input$eintout_intgroup) %>%\n        select(Int_type) %>%\n        unique()\n    }\n    stillSelected <- isolate(input$eintout_inttype[input$eintout_inttype %in% eintout_inttype])\n    rownames(stillSelected) <- NULL\n    rownames(eintout_inttype) <- NULL\n    updateSelectInput(session,\"eintout_inttype\", choices=as.vector(eintout_inttype), selected=stillSelected)\n  })\n  \n  observe({\n    eintout_outtype <- if (input$eintout_outgroup == \"All\") character(0) else{\n      filter(intlabels, out_group == input$eintout_outgroup) %>%\n        select(Out_type) %>%\n        unique()\n    }\n    stillSelected <- isolate(input$eintout_outtype[input$eintout_outtype %in% eintout_outtype])\n    rownames(stillSelected) <- NULL\n    rownames(eintout_outtype) <- NULL\n    updateSelectInput(session,\"eintout_outtype\", choices=as.vector(eintout_outtype), selected=stillSelected)\n  })\n\n  ##==========\n  ## Creating reactive data table\n  ##==========\n\n  map_data_final <- map_data_final\n\n  dataInputA <- reactive({\n    data <- map_data_final\n    if (input$eintout_region != \"All\" & input$eintout_subreg == \"\" & input$eintout_country == \"\") {\n      data <- data[data$region == input$eintout_region,]\n    } else if (input$eintout_region != \"All\" & input$eintout_subreg != \"\" & input$eintout_country == \"\") {\n      data <- data[data$subregion == input$eintout_subreg,]\n    } else if (input$eintout_region != \"All\" & input$eintout_subreg != \"\" & input$eintout_country != \"\") {\n      data <- data[data$Study_country == input$eintout_country,]\n    } else\n      data <- data\n    distinct(data)\n  })\n\n  dataInputD <- reactive({\n    data <- as.data.frame(dataInputA())\n    if (input$eintout_mht != \"All\") {\n      data <- data[data$species_habitat == input$eintout_mht,]\n    } else\n      data <- data\n\n    distinct(data)\n  })\n\n  dataInputE <- reactive({\n    data <- as.data.frame(dataInputD())\n    if (input$eintout_intgroup != \"All\" & input$eintout_inttype == \"\") {\n      data <- data[data$int_group == input$eintout_intgroup,]\n    } else if (input$eintout_intgroup != \"All\" & input$eintout_inttype != \"\") {\n      data <- data[data$int_labels == input$eintout_inttype,]\n    } else\n      data <- data\n    distinct(data)\n  })\n  \n  dataInputF <- reactive({\n    data <- as.data.frame(dataInputE())\n    if (input$eintout_outgroup != \"All\" & input$eintout_outtype == \"\") {\n      data <- data[data$out_group == input$eintout_outgroup,]\n    } else if (input$eintout_outgroup != \"All\" & input$eintout_outtype != \"\") {\n      data <- data[data$Outcome == input$eintout_outtype,]\n    } else\n      data <- data\n    distinct(data)\n  })\n\n  output$e_table <- DT::renderDataTable({\n    data <- distinct(dataInputF())\n    data <- select(data,aid,Pub_type,Authors,Pub_year,Title,Journal,Species,Desired_outcome,Actions_taken,int_group,Int_type,Parts,Purpose,Int_supplychain,Study_goal,Study_location,Study_country,subregion,region,Design.control,Comps.type,Design.type,Study_supplychain,Stated_outcomes,out_group,Outcome,Indicators,Outcome.data_type,species_group,species_habitat,link,FullText)\n    colnames(data) <- c(\"Article ID\",\"Publication type\",\"Author(s)\",\"Publication year\",\"Title\",\"Journal\",\"Target species\",\"Desired outcome of intervention\",\"Actions taken\",\"Intervention group\",\"Intervention sub-type\",\"Parts used\",\"Purpose\",\"Part of the supply chain\",\"Goal of study\",\"Location of study\",\"Country of study\",\"Subregion of study\",\"Region of study\",\"Does the study employ a control?\",\"What type of comparators are used?\",\"What is the design of the study?\",\"Where along the supply chain does this study examine?\",\"Stated outcomes measured\",\"Outcome categories\",\"Outcome types\",\"Indicators used\",\"Data type\",\"Type of wildlife\",\"Species habitat\",\"DOI link\",\"Open Access?\")\n    data <- distinct(data)\n    DT::datatable(data, escape=FALSE)\n  })\n\n  ##=========\n  ## Creating reactive bibliography\n  ##=========\n\n  e_bibl <- reactive({\n    data <- as.data.frame(dataInputA())\n\n    data <- data %>% select(aid,Pub_type,Authors,Title,Pub_year,Journal,DOI,FullText) %>% distinct()\n    colnames(data) <- c(\"Article ID\", \"Publication type\",\"Authors\",\"Title\",\"Year of publication\",\"Journal\",\"DOI\",\"Open access?\")\n    data <- distinct(data)\n  })\n\n  ##==============\n  ## Download buttons\n  ##==============\n\n  output$downloadFullData_R <- downloadHandler(\n    filename = function() {\n      paste(input$eintout_region,\"_\",input$eintout_int,\"_\",input$eintout_out,\"_dataset.csv\",sep=\"\")\n    },\n    content = function(file) {\n      write.csv(dataInputE(), file)\n    }\n  )\n\n  output$downloadBiblio_R <- downloadHandler(\n    filename = function() {\n      paste(input$eintout_region,\"_\",input$eintout_int,\"_\",input$eintout_out,\"_biblio.csv\",sep=\"\")\n    },\n    content = function(file) {\n      write.csv(e_bibl(), file)\n    }\n  )\n\n  observeEvent(input$submit, {\n    output$download_opts5 <- renderUI({\n      downloadButton(\"downloadBiblio_R\", \"Bibliography as .csv\")\n    })\n  })\n\n  observeEvent(input$submit, {\n    output$download_opts6 <- renderUI({\n      downloadButton(\"downloadFullData_R\", \"Data as .csv\")\n    })\n  })\n\n  #=========\n  # Info box summaries\n  #=========\n  us2 <- reactive({\n    n <- n_distinct(dataInputF()$aid)\n  })\n  \n  oa2 <- reactive({\n    data <- select(dataInputF(),aid,FullText)\n    FT <- filter(data, FullText == \"Y\")\n    FT <- distinct(FT)\n    n <- n_distinct(FT$aid)\n  })\n\n  output$elink_us_2 <- renderText({\n    as.character(us2())\n  })\n\n  output$elink_oa_2 <- renderText({\n    as.character(oa2())\n  })\n\n  ##========\n  ## Data summary plots\n  ##========\n\n  output$e_int <- renderPlotly({\n    dat <- as.data.frame(dataInputF())\n\n    if (input$show_subtypes == FALSE){\n      is_counts = matrix(nrow=length(int_group), ncol=2)\n      rownames(is_counts) <- int_group\n      var_type <- int_group\n      for (i in var_type){\n        subset <- filter(dat, int_group == i)\n        is_counts[i,1] <- i\n        is_counts[i,2] <- n_distinct(subset$aid)\n      }\n    } else if (input$show_subtypes == TRUE){\n      is_counts = matrix(nrow=length(int_labels), ncol=2)\n      rownames(is_counts) <- int_labels\n      var_type <- int_labels\n      for (i in var_type){\n        subset <- filter(dat, int_label == i)\n        is_counts[i,1] <- i\n        is_counts[i,2] <- n_distinct(subset$aid)\n      }\n    }\n    colnames(is_counts) <- c(\"var\",\"count\")\n    is_counts <- as.data.frame(is_counts)\n    is_counts$count <- as.numeric(as.vector(is_counts$count))\n    if (input$show_subtypes == FALSE){\n      is_counts$labels <- c(\"Enforcement/compliance\", \"Establish/refine laws & policies\",  \"Reduce demand/consumption\", \"Reduce threats to species\", \"Support livelihoods\")\n    } else {\n      is_counts$labels <- c(\"Laws, regulations & codes\", \"Policies & regulations\", \"Detection\", \"Prosecution\", \"Civil action\", \"Substitutions\", \"Awareness raising\", \"Market-based incentives\", \"Disincentives for illegal behavior\", \"Incentives for stewardship of wildlife\", \"Decrease human-wildlife conflict\", \"Spatial areas of protection\", \"Regulate harvest\", \"Culturing of species\")\n    }\n\n    plot_ly(x=is_counts$labels, y=is_counts$count ,type=\"bar\") %>%\n      layout(margin = list(b=200,r=50), xaxis=list(tickangle= 45))\n  })\n\n  output$e_out <- renderPlotly({\n    dat <- as.data.frame(dataInputF())\n    \n    if (input$show_subtypes_o == FALSE){\n      io_counts = matrix(nrow=length(out_group), ncol=2)\n      rownames(io_counts) <- out_group\n      var_type <- out_group\n      for (i in var_type){\n        subset <- filter(dat, out_group == i)\n        io_counts[i,1] <- i\n        io_counts[i,2] <- n_distinct(subset$aid)\n      }\n    } else if (input$show_subtypes_o == TRUE){\n      io_counts = matrix(nrow=length(out_type), ncol=2)\n      rownames(io_counts) <- out_type\n      var_type <- out_type\n      for (i in var_type){\n        subset <- filter(dat, Outcome == i)\n        io_counts[i,1] <- i\n        io_counts[i,2] <- n_distinct(subset$aid)\n      }\n    }\n    colnames(io_counts) <- c(\"var\",\"count\")\n    io_counts <- as.data.frame(io_counts)\n    io_counts$count <- as.numeric(as.vector(io_counts$count))\n    if (input$show_subtypes_o == FALSE){\n      io_counts$labels <- c(\"Behavioural\",\"Biological\",\"Human well-being\")\n    } else {\n      io_counts$labels <- c(\"Management\",\"Protection\",\"Trade\",\"Behavior change\",\"Population\",\"Species\",\"Economic living standards\",\"Material living standards\",\"Health\",\"Education\",\"Social relations\",\"Security and saffety\",\" Governance and empowerment\",\"Subjective well-being\",\"Culture & spirituality\",\"Freedom of choice & action\")\n    }\n    \n    plot_ly(x=io_counts$labels, y=io_counts$count ,type=\"bar\") %>%\n      layout(margin = list(b=200,r=50), xaxis=list(tickangle= 45))\n  })\n\n  output$e_comp <- renderPlotly({\n    dat <- as.data.frame(dataInputF())\n\n    ic_counts = matrix(nrow=length(design_type), ncol=2)\n    rownames(ic_counts) <- design_type\n    var_type <- design_type\n    for (i in var_type){\n      subset <- filter(dat, Design.type == i)\n      ic_counts[i,1] <- i\n      ic_counts[i,2] <- n_distinct(subset$aid)\n    }\n\n    colnames(ic_counts) <- c(\"var\",\"count\")\n    ic_counts <- as.data.frame(ic_counts)\n    ic_counts$count <- as.numeric(as.vector(ic_counts$count))\n    ic_counts$labels <- c(design_type)\n\n    plot_ly(x=ic_counts$labels, y=ic_counts$count ,type=\"bar\") %>%\n      layout(margin = list(b=200,r=50), xaxis=list(tickangle= 45))\n  })\n\n  output$e_eco <- renderPlotly({\n    dat <- as.data.frame(dataInputF())\n\n    ib_counts = matrix(nrow=length(supply_type), ncol=2)\n    rownames(ib_counts) <- supply_type\n    var_type <- supply_type\n\n    for (i in var_type){\n      subset <- filter(dat, Int_supplychain == i)\n      ib_counts[i,1] <- i\n      ib_counts[i,2] <- n_distinct(subset$aid)\n    }\n\n    colnames(ib_counts) <- c(\"var\",\"count\")\n    ib_counts <- as.data.frame(ib_counts)\n    ib_counts$count <- as.numeric(as.vector(ib_counts$count))\n    ib_counts$labels <- c(\"Supply\",\"Trade\",\"Consumer\")\n\n    plot_ly(x=ib_counts$labels, y=ib_counts$count ,type=\"bar\") %>%\n      layout(margin = list(b=200,r=50), xaxis=list(tickangle= 45))\n  })\n  \n  output$e_use <- renderPlotly({\n    dat <- as.data.frame(dataInputF())\n    \n    ib_counts = matrix(nrow=length(purpose_type), ncol=2)\n    rownames(ib_counts) <- purpose_type\n    var_type <- purpose_type\n    \n    for (i in var_type){\n      subset <- filter(dat, Purpose == i)\n      ib_counts[i,1] <- i\n      ib_counts[i,2] <- n_distinct(subset$aid)\n    }\n    \n    colnames(ib_counts) <- c(\"var\",\"count\")\n    ib_counts <- as.data.frame(ib_counts)\n    ib_counts$count <- as.numeric(as.vector(ib_counts$count))\n    ib_counts$labels <- c(\"Food\",\"Fuel\",\"Medicine\",\"Decoration\",\"Pets\",\"Construction\",\"Clothing\",\"Trophy\",\"Other\")\n    \n    plot_ly(x=ib_counts$labels, y=ib_counts$count ,type=\"bar\") %>%\n      layout(margin = list(b=200,r=50), xaxis=list(tickangle= 45))\n  })\n  \n  output$e_spec <- renderPlotly({\n    dat <- as.data.frame(dataInputF())\n    \n    spec_counts <- count(dat,species_group)\n    colnames(spec_counts) <- c(\"labels\",\"count\")\n    \n    plot_ly(x=spec_counts$labels, y=spec_counts$count ,type=\"bar\") %>%\n      layout(margin = list(b=200,r=50), xaxis=list(tickangle= 45))\n  })\n\n  ##========\n  ## Prepping for mapping\n  ##========\n\n  country_dat <- reactive({\n    dat <- as.data.frame(dataInputF())\n    regions <- read.csv(\"data/country_list_all.csv\", head=TRUE, sep=\",\")\n    names(regions) <- c(\"Study_country\", \"Region\", \"Code\",\"Subregion\",\"Point\")\n\n    ##Count number of studies for all countries and arrange by region\n    country_count <- matrix(nrow=nrow(regions), ncol=2)\n    rownames(country_count) <- regions$Study_country\n    colnames(country_count) <- c(\"Study_country\", \"counts\")\n    #Calculate in for loop and write to blank matrix\n    for (c in regions$Study_country){\n      subset <- filter(dat, Study_country == c)\n      country_count[c,1] <- c\n      country_count[c,2] <- as.numeric(n_distinct(subset$aid))\n    }\n\n    rownames(country_count) = NULL\n    country_count <- as.data.frame(country_count)\n    country_count <- inner_join(country_count,regions,by=\"Study_country\")\n    country_count <- filter(country_count,Code != \"\")\n    country_count <- as.data.frame(country_count)\n  })\n\n  #===================\n  # Plotting interactive map with plotly\n  #===================\n\n  output$map_plotly <- renderPlotly({\n    country_count <- as.data.frame(country_dat())\n    country_count$counts <- as.numeric(as.vector(country_count$counts))\n\n    l <- list(color = toRGB(\"grey\"), width = 0.5)\n    g <- list(\n      showframe = FALSE,\n      resolution=50,\n      projection = list(type = 'Mercator'),\n      showcoastlines = T,\n      showcountries = T,\n      countrycolor = toRGB(\"white\"),\n      coastlinecolor = toRGB(\"white\")\n    )\n\n    col <- colorRampPalette(c(\"white\", \"#74c476\",\"#41ab5d\", \"#238b45\", \"#006d2c\", \"#00441b\")) (200)\n\n    p <- plot_geo(country_count) %>%\n      add_trace(z=~counts, locations = ~Code,\n                 text = ~Study_country, color = ~counts, colors=col, marker=list(line=l)\n                ) %>%\n      colorbar(title=\"No. of unique articles\") %>%\n      layout(\n        geo = g\n      )\n\n  })\n\n})",
    "created" : 1496882875762.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1908557204",
    "id" : "E1CCF824",
    "lastKnownWriteTime" : 1500599516,
    "last_content_update" : 1500599516841,
    "path" : "~/Documents/github/wildlife_trade_portal/server_explore.R",
    "project_path" : "server_explore.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}